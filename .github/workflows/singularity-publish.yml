name: Singularity

on:
  workflow_run:
      workflows: ["Docker"]
      branches: [master]
      types: 
        - completed

env:
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository_owner }}/parakeet

jobs:
  
  build:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:

      # Install Golang
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      # Install singularity dependencies
      - name: Install Dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y \
            build-essential \
            libssl-dev \
            uuid-dev \
            libgpgme11-dev \
            squashfs-tools \
            libseccomp-dev \
            pkg-config

      # Install singularity
      - name: Install Singularity
        env:
          SINGULARITY_VERSION: 3.8.1
          GOPATH: /tmp/go
      
        run: |
          mkdir -p $GOPATH
          sudo mkdir -p /usr/local/var/singularity/mnt && \
          mkdir -p $GOPATH/src/github.com/sylabs && \
          cd $GOPATH/src/github.com/sylabs && \
          wget -qO- https://github.com/sylabs/singularity/releases/download/v${SINGULARITY_VERSION}/singularity-ce-${SINGULARITY_VERSION}.tar.gz | \
          tar xzv && \
          cd singularity-ce-${SINGULARITY_VERSION} && \
          ./mconfig -p /usr/local && \
          make -C builddir && \
          sudo make -C builddir install          
      
      # Build the container from the docker image
      - name: Build container
        run: |
          sudo -E singularity build container.sif docker://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:master

      # Deploy the singularity container
      - name: Deploy container
        if: (github.event_name != 'pull_request')
        run: |         
          echo ${{ secrets.GITHUB_TOKEN }} | singularity remote login -u ${{ github.actor }} --password-stdin oras://${{ env.REGISTRY }}
          singularity push container.sif oras://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:master
          
            
